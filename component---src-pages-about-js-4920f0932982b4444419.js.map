{"version":3,"sources":["webpack:///./src/components/container.js","webpack:///./src/pages/about.js","webpack:///./src/components/header.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["children","className","containerStyles","container","style","margin","textAlign","to","headerText","title","width","height","src","frameborder","allow","allowfullscreen","props","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"6FAAA,8CAGe,gBAAmB,IAAhBA,EAAe,EAAfA,SACd,OACI,yBAAKC,UAAWC,IAAgBC,WAAYH,K,oCCLpD,oEAKe,qBACX,OACI,kBAAC,IAAD,KACI,yBAAKI,MAAO,CAAEC,OAAQ,SAAUC,UAAW,WACvC,kBAAC,IAAD,CAAML,UAAU,SAASM,GAAG,KAA5B,SAEJ,kBAAC,IAAD,CAAQC,WAAW,eACnB,4CAGA,iDAMA,4BAAQC,MAAM,aAAaC,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,O,kCCrB/N,yBAEe,aAAAC,GACX,OACI,4BAAKA,EAAMR,c,kCCJnB,sGAcyBS,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-about-js-4920f0932982b4444419.js","sourcesContent":["import React from \"react\"\nimport containerStyles from \"./container.module.css\"\n\nexport default ({ children }) => {\n    return (\n        <div className={containerStyles.container}>{children}</div>\n    )\n}","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Header from \"../components/header\"\nimport Container from \"../components/container\"\n\nexport default () => {\n    return (\n        <Container>\n            <div style={{ margin: \"0 auto\", textAlign: \"center\"}}>\n                <Link className=\"button\" to=\"/\">Home</Link>\n            </div>\n            <Header headerText=\"(=^･ω･^)y＝\" />\n            <h2>\n                こんにちは、ガツビ！！！\n            </h2>\n            <p>\n                お元気ですか？\n                。。。\n                あー、そう？\n            </p>\n\n            <iframe title=\"cute otter\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BcyYQXTHIV8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        </Container>\n    )\n}","import React from \"react\"\n\nexport default props => {\n    return (\n        <h1>{props.headerText}</h1>\n    )\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}